//TP9
//binome : Benjamin Ruytoor et Aurore Allart

run("Conversions...", " ");// set conversions
// Calcul de la norme du gradient par masque de Sobel
//
requires("1.41i");	// cause substring(string, index)
setBatchMode(true);
imageDeBase = getImageID();
filename = getTitle();
filenameWithoutExt = substring(filename, 0, lastIndexOf(filename, "."));
extension = substring(filename, lastIndexOf(filename, "."));
filenameGradX = filenameWithoutExt+"_grad_x"+extension;
filenameGradY = filenameWithoutExt+"_grad_y"+extension;
run("32-bit"); // Conversion en Float avant calcul des dérivées !!

// à compléter

run("Duplicate...", "title="+filenameGradX);
run("Convolve...", "text1=[-1 0 1\n-2 0 2\n-1 0 1\n] normalize");
imageGradX = getImageID();

selectImage(imageDeBase);
run("Duplicate...", "title="+filenameGradY);
run("Convolve...", "text1=[-1 -2 -1\n0 0 0\n1 2 1\n] normalize");
imageGradY = getImageID();

selectImage(imageDeBase);
filenameResultatNorme = filenameWithoutExt+"resultatNorme"+extension;
run("Duplicate...", "title="+filenameResultatNorme);
imageNorme = getImageID();

selectImage(imageDeBase);
filenameResultatDirection = filenameWithoutExt+"resultatDirection"+extension;
run("Duplicate...", "title="+filenameResultatDirection);
imageDirection = getImageID();

/****** Calcul de la norme du gradient ******/
// récupération de la taille de l'image
w = getWidth();
h = getHeight();
// Calculs pour chaque pixel
// à compléter
norme = 0;
px = 0;
py = 0;
tmp = 0;

for (j=0; j<h; j++) 
{
	for (i=0; i<w; i++) 
{
		selectImage(imageGradX);
		px=getPixel(i,j);
		selectImage(imageGradY);
		py=getPixel(i,j);
		norme=sqrt(px*px+py*py);
		selectImage(imageNorme);
		setPixel(i,j,norme);
		selectImage(imageDirection);
		direction = atan2(py,px)*180/PI;
		setPixel(i,j,direction);	
		}
}


setBatchMode("exit and display");
