//TP9
//binome : Benjamin Ruytoor et Aurore Allart
macro "tp9"{
run("Conversions...", " ");

// Calcul de la norme du gradient par masque de Sobel
requires("1.41i");	// cause substring(string, index)
setBatchMode(true);
imageDeBase = getImageID();
filename = getTitle();
filenameWithoutExt = substring(filename, 0, lastIndexOf(filename, "."));
extension = substring(filename, lastIndexOf(filename, "."));
filenameGradX = filenameWithoutExt+"_grad_x"+extension;
filenameGradY = filenameWithoutExt+"_grad_y"+extension;
run("32-bit"); // Conversion en Float avant calcul des derivees !!

run("Duplicate...", "title="+filenameGradX);
run("Convolve...", "text1=[-1 0 1\n-2 0 2\n-1 0 1\n] normalize");
imageGradX = getImageID();

selectImage(imageDeBase);
run("Duplicate...", "title="+filenameGradY);
run("Convolve...", "text1=[-1 -2 -1\n0 0 0\n1 2 1\n] normalize");
imageGradY = getImageID();

selectImage(imageDeBase);
filenameResultatNorme = filenameWithoutExt+"resultatNorme"+extension;
run("Duplicate...", "title="+filenameResultatNorme);
imageNorme = getImageID();

selectImage(imageDeBase);
filenameResultatDirection = filenameWithoutExt+"resultatDirection"+extension;
run("Duplicate...", "title="+filenameResultatDirection);
imageDirection = getImageID();

/****** Calcul de la norme du gradient ******/
// recuperation de la taille de l'image
w = getWidth();
h = getHeight();

// Calculs pour chaque pixel
norme = 0;
px = 0;
py = 0;
tmp = 0;

for (j=0; j<h; j++) 
{
	for (i=0; i<w; i++) 
{
		selectImage(imageGradX);
		px=getPixel(i,j);
		selectImage(imageGradY);
		py=getPixel(i,j);
		norme=sqrt(px*px+py*py); 
		selectImage(imageNorme);
		setPixel(i,j,norme);
		selectImage(imageDirection);
		direction = atan2(py,px)*180/PI;
		setPixel(i,j,direction);
		}
}

//selectImage(imageNorme);
// Histogramme cumulé
//getRawStatistics(surf, moy, min, max, std, h); // h[0..255] <-> histo
//hc=newArray(256);
//hc[0]=h[0];
//for (i=1;i< h.length;i++) {
//    hc[i] = hc[i-1]+h[i] ;
//}

selectImage(imageNorme);
run("Duplicate...", "title="+"final");
imageFinal = getImageID();

//      x2  x3  x4
//      x1 CC x1
//      x4  x3  x2
// xi -> valeurs possibles pour les pixels autours
// x1<22.5<x2<67.5<x3<112.5<x4<157.5<x1 
for(y=0;y<h;y++){
	for(x=0;x<w;x++){
		selectImage(imageDirection);
		direction=getPixel(x,y);
		direction=abs(direction);
		selectImage(imageNorme);
		if(direction>112.5){
			if(direction<157.5){
				//x4
				if(getPixel(x,y)<getPixel(x-1,y+1)){
					selectImage(imageFinal);
					setPixel(x,y,0);
					selectImage(imageNorme);
					if(getPixel(x-1,y+1)<getPixel(x+1,y-1)){
						selectImage(imageFinal);
						setPixel(x-1,y+1,0);
					}else{
						selectImage(imageFinal);
						setPixel(x+1,y-1,0);
					}
				}else{
					selectImage(imageFinal);
					setPixel(x-1,y+1,0);
					selectImage(imageNorme);
					if(getPixel(x+1,y-1)<getPixel(x,y)){
						selectImage(imageFinal);
						setPixel(x+1,y-1,0);
					}else{
						selectImage(imageFinal);
						setPixel(x,y,0);
					}
				}
				//fin x4
			}else{
				//x1
				if(getPixel(x,y)<getPixel(x+1,y)){
					selectImage(imageFinal);
					setPixel(x,y,0);
					selectImage(imageNorme);
					if(getPixel(x+1,y)<getPixel(x-1,y)){
						selectImage(imageFinal);
						setPixel(x+1,y,0);
					}else{
						selectImage(imageFinal);
						setPixel(x-1,y,0);
					}
				}else{
					selectImage(imageFinal);
					setPixel(x+1,y,0);
					selectImage(imageNorme);
					if(getPixel(x-1,y)<getPixel(x,y)){
						selectImage(imageFinal);
						setPixel(x-1,y,0);
					}else{
						selectImage(imageFinal);
						setPixel(x,y,0);
					}
				}
				//fin x1
			}
		}else{
			if(direction>67.5){
				//x3
				if(getPixel(x,y)<getPixel(x,y+1)){
					selectImage(imageFinal);
					setPixel(x,y,0);
					selectImage(imageNorme);
					if(getPixel(x,y+1)<getPixel(x,y-1)){
						selectImage(imageFinal);
						setPixel(x,y+1,0);
					}else{
						selectImage(imageFinal);
						setPixel(x,y-1,0);
					}
				}else{
					selectImage(imageFinal);
					setPixel(x,y+1,0);
					selectImage(imageNorme);
					if(getPixel(x,y-1)<getPixel(x,y)){
						selectImage(imageFinal);
						setPixel(x,y-1,0);
					}else{
						selectImage(imageFinal);
						setPixel(x,y,0);
					}
				}
				//fin x3
			}else if(direction<22.5){
				//x1
				if(getPixel(x,y)<getPixel(x+1,y)){
					selectImage(imageFinal);
					setPixel(x,y,0);
					selectImage(imageNorme);
					if(getPixel(x+1,y)<getPixel(x-1,y)){
						selectImage(imageFinal);
						setPixel(x+1,y,0);
					}else{
						selectImage(imageFinal);
						setPixel(x-1,y,0);
					}
				}else{
					selectImage(imageFinal);
					setPixel(x+1,y,0);
					selectImage(imageNorme);
					if(getPixel(x-1,y)<getPixel(x,y)){
						selectImage(imageFinal);
						setPixel(x-1,y,0);
					}else{
						selectImage(imageFinal);
						setPixel(x,y,0);
					}
				}
				//fin x1
			}else{
				//x2
				if(getPixel(x,y)<getPixel(x+1,y+1)){
					selectImage(imageFinal);
					setPixel(x,y,0);
					selectImage(imageNorme);
					if(getPixel(x+1,y+1)<getPixel(x-1,y-1)){
						selectImage(imageFinal);
						setPixel(x+1,y+1,0);
					}else{
						selectImage(imageFinal);
						setPixel(x-1,y-1,0);
					}
				}else{
					selectImage(imageFinal);
					setPixel(x+1,y+1,0);
					selectImage(imageNorme);
					if(getPixel(x-1,y-1)<getPixel(x,y)){
						selectImage(imageFinal);
						setPixel(x-1,y-1,0);
					}else{
						selectImage(imageFinal);
						setPixel(x,y,0);
					}
				}
				//fin x2
			}
		 }
	}
}

//Plot.create("Histogramme cumulé de "+getTitle, "Niveau", "hc", hc);
//Plot.show();

setBatchMode("exit and display");
}
